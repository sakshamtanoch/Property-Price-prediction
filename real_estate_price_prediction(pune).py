# -*- coding: utf-8 -*-
"""real_estate_price_prediction(PUNE).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y3UgbLI5JkO6yje6CCy-VVCeAOSgmDa-
"""

import pandas as pd 
import numpy as np

# get the dataset 

property_df = pd.read_csv('/content/Real Estate Data 2.csv')
property_df.head(1)

"""# **Data Pre-Processing**"""

property_df.info()

"""### Since we need:

1) Area_sqft, 

2) price_inlakhs, 

3) price_in_millions 

in the float fromat, let's convert them in it. 
"""

mill_price = []
area_sqft = []
lakh_price = []
exceptions = []
for i in range(200):
  try:

    price = float(property_df['Price in Millions'][i])
    area = float(property_df['Property Area in Sq. Ft.'][i])
    lakhs = float(property_df['Price in lakhs'][i])
    mill_price.append(price)
    area_sqft.append(area)
    lakh_price.append(lakhs)
  except:
    exceptions.append(i)

mill_price = pd.DataFrame(mill_price)
area_sqft = pd.DataFrame(area_sqft)
lakh_price = pd.DataFrame(lakh_price)

"""### Below we have the index no. of the rows where we had the exceptions. We can simply drop these rows to make the data clean"""

exceptions

exceptions


property_df = property_df.drop( [
                  property_df.index[6],
                  property_df.index[7],
                  property_df.index[13],
                  property_df.index[14],
                  property_df.index[17],
                  property_df.index[40],
                  property_df.index[41],
                  property_df.index[157],
                  property_df.index[171],
                  property_df.index[172],
                  property_df.index[182],
                  property_df.index[194],
                  property_df.index[195],
                  property_df.index[196],
                  property_df.index[197],
                  property_df.index[198], ] )

# Adding / Merging the columns to the list

property_df['Price_in_lakhs'] = lakh_price
property_df['Price_in_millions'] = mill_price
property_df['Area_sqft_property'] = area_sqft

property_df = property_df.drop(['Property Area in Sq. Ft.', 'Price in lakhs', 'Price in Millions'], axis = 1)

property_df.head()

property_df.info()

"""## **Exploratory Data analysis** and **Data Visualization** """

import plotly.express as px
import seaborn as sns 
import matplotlib.pyplot as plt 
import matplotlib

# to imporve the default settings and the font size of our charts 

sns.set_style('darkgrid')
matplotlib.rcParams['font.size'] = 14
matplotlib.rcParams['figure.figsize'] = (10,6)
matplotlib.rcParams['figure.facecolor'] = "#00000000"

# area distribution 

property_df.Area_sqft_property.describe()

fig = px.histogram(property_df,
                   x = property_df['Area_sqft_property'],
                   marginal = 'box',
                   nbins = 150,
                   title = 'area distribution')
fig.update_layout(bargap = 0.2)
fig.show()

"""# **Observations:** 

**Most no. of houses sold are from range: 379 SQFT - 1700 SQFT**

## *Less no. of houses are sold with minimum and maximum AREA:*

**Min Area (100 SQFT - 200 SQFT)**

**Max Area ( 1780 SQFT - 2459 SQFT)**


### **[ For such trend it can be assumed that Houses with the minimum areas can not satisfy the costumers (most of them) and houses with the extreme maximum areas are out of their budgets. ]** 
"""

# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

"""## Visualizing BHKs: """

property_df.Property_type_BHK.describe()

fig2 = px.histogram(property_df,
                    x = property_df['Property_type_BHK'],
                    marginal = 'box',
                    color_discrete_sequence=['green'],
                    title = 'BHK distribution',
                    nbins = 20)
fig2.update_layout(bargap = 0.2)
fig2.show()

"""# Observations:

Maximum no. of Houses sold are of 

# **2 BHK > 3 BHK > 1 BHK** 

### *2 BHK (90 units)*
### *3 BHK (55 units)*
### *1 BHK (21 units)*

"""

# ----------------------------- -------------------------------------------------------- ---------------------------------------------------------------------------------------------------

fig3 = px.histogram(property_df,
                    y = property_df['Price_in_millions'],
                    x = property_df['Sub-Area'],
                    marginal = 'box',
                    color = property_df['Sub-Area'],
                    color_discrete_sequence=['gray', 'gold'],
                    title = 'Sub-Area vs Price',
                    nbins = 2)
fig3.update_layout(bargap = 0.2)
fig3.show()

"""### To Understand the distribuion of the Price with respect to Sub Area  """

fig3 = px.box(property_df, x = 'Sub-Area', y = 'Price_in_millions', points = 'outliers', color = 'Sub-Area' )
fig3.show()

"""## **Observations:** 

**The above box plot lets us know:**

1) **median price at a particular location** 

2) **outliears**

3) **minimum price in a sub area** 

4) **highest price in a sub area** 
"""

fig4 = px.histogram(property_df,
                    y = property_df['Price_in_millions'],
                    x = property_df['Company Name'],
                    marginal = 'box',
                    color = property_df['Company Name'],
                    color_discrete_sequence=[ 'yellow',' green'],
                    title = 'property_company vs Price',
                    nbins = 1)
fig4.update_layout(bargap = 0.3)
fig4.show()

"""## To understand the distribution of the price with respect to the company (Builder)"""

fig4 = px.box(property_df, x = 'Company Name', y = 'Price_in_millions', points = 'outliers', color = 'Company Name' )
fig4.show()

"""## **Observations: From Above Plot**

1) **Company that has the most expensive properties = Sagitarius Ecospaces [ median = 48.3 M ]**

2) **Company with the cheapest options = Shapooriji Paloonji, Godrej, proviso group, Maha Anad etc [ Median = 6.69 M to 8.35 M ]**

3) **Company with the most affordable options = Urban Space Creator, Unique Properties, Lush Life, Key Stone Landmark etc [ Median = 11 M to 18 M ]**
"""

#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

"""## The plot below shows the distribution of the propty type i.e. BHKs with respect to the company and tells us the total no. of different kinds of properties the company has."""

fig4 = px.histogram(property_df,
                    # y = property_df['Price_in_millions'],
                    x = property_df['Company Name'],
                    # marginal = 'box',
                    color = property_df['Property_type_BHK'],
                    color_discrete_sequence=['skyblue', 'green', 'pink', 'grey', 'yellow', 'orange'],
                    title = 'property_company vs Price',
                    nbins = 1)
fig4.update_layout(bargap = 0.1)
fig4.show()

fig6 = px.scatter(property_df,
                  x = property_df['Area_sqft_property'],
                  y = property_df['Price_in_millions'],
                  color = property_df['Property_type_BHK'],
                  hover_data = [property_df['Company Name'], property_df['Sub-Area'] ],
                  opacity = 0.9,
                  title = 'Price vs Area')
fig6.update_traces(marker_size = 15)
fig6.show()

"""## OBSERVATIONS:

Here we can see, many time, for a property of small area, the price price can be higher and vice versa. It means it depends on the area wehere it is located and the company who built it.

# Outliers Removal
"""

property_df = property_df[property_df['Price_in_millions'] < 92.0]
property_df = property_df[property_df['Area_sqft_property'] > 163.0]
property_df = property_df[property_df['Area_sqft_property'] < 2043.0]

fig6_1 = px.scatter(property_df,
                  x = property_df['Area_sqft_property'],
                  y = property_df['Price_in_millions'],
                  color = property_df['Property_type_BHK'],
                  hover_data = [property_df['Company Name'], property_df['Sub-Area'] ],
                  opacity = 0.9,
                  title = 'Price vs Area')
fig6_1.update_traces(marker_size = 15)
fig6_1.show()

property_df.info()

# We need to convert the Yes No columns in the Boolean form which is basically a string uptill now: 

property_df = property_df.drop(['Total TownShip Area in Acres'], axis = 1)
property_df['ClubHouse']  = property_df['ClubHouse'].map({'Yes': True, 'No': False})
property_df['Hospital in TownShip']  = property_df['Hospital in TownShip'].map({'Yes': True, 'No': False})
property_df['Mall in TownShip']  = property_df['Mall in TownShip'].map({'Yes': True, 'No': False})
property_df['Park / Jogging track']  = property_df['Park / Jogging track'].map({'Yes': True, 'No': False})
property_df['Swimming Pool']  = property_df['Swimming Pool'].map({'Yes': True, 'No': False})
property_df['Gym']  = property_df['Gym'].map({'Yes': True, 'No': False})
property_df['School / University in Township '] = property_df['School / University in Township '].map({'Yes': True, 'No': False})

property_df.tail(10)

property_df['ClubHouse']  = property_df['ClubHouse'].replace({True: 1, False : 0})
property_df['Hospital in TownShip']  = property_df['Hospital in TownShip'].replace({True: 1, False : 0})
property_df['Mall in TownShip']  = property_df['Mall in TownShip'].replace({True: 1, False : 0})
property_df['Park / Jogging track']  = property_df['Park / Jogging track'].replace({True: 1, False : 0})
property_df['Swimming Pool']  = property_df['Swimming Pool'].replace({True: 1, False : 0})
property_df['Gym']  = property_df['Gym'].replace({True: 1, False : 0})
property_df['School / University in Township '] = property_df['School / University in Township '].replace({True: 1, False : 0})

property_df.head()

"""## Feature Engineering: 

Many of the collumns are not fit for the predictions, like loaction, company etc. we need to convert them into numeric form using onw hot encoder.
"""

property_df = property_df.drop(['Location'], axis = 1)
propert_df = property_df.drop(['Sr. No.'], axis =1)

property_df.head(5)

property_df2 = property_df

dummy1 = pd.get_dummies(property_df2['Sub-Area'])
dummy2 = pd.get_dummies(property_df2['Company Name'])

property_df2 = propert_df.drop(['Mall in TownShip'], axis = 1 )

property_df2.dropna()
dummy1.dropna()
dummy2.dropna()

property_df2.isna().sum()

# here we have one NAN value in the clubhouse feature, now lets fill it using the mode.
property_df2['ClubHouse'].mode()
                                    # mode comes out to be 1

property_df2['ClubHouse'].fillna('1.0', inplace = True)

property_df2.isna().sum()

property_df3 = property_df2
property_df3 = property_df3.drop(['Sub-Area', 'Company Name', 'TownShip Name/ Society Name', 'Price_in_lakhs'], axis = 1)

property_df3.head(2)

property_df3 = property_df3.dropna()

"""### Loking for the NAN values 

Because we got an error during model.fit and went back to our excel file, made the necessary changes 
"""

from sklearn.linear_model import LinearRegression

property_df3.head(2)

inputs =  property_df3.drop(['Price_in_millions'], axis = 1)
targets = property_df3.Price_in_millions

inputs.head(1)

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(inputs, targets, test_size = 0.3, random_state = 101 )

print(X_train.shape)
print(X_test.shape)
print(Y_train.shape)
print(Y_test.shape)

from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(X_train, Y_train)

predictions = model.predict(X_test)
predictions

fig = px.scatter( Y_test, predictions, trendline="ols")
fig.data[1].line.color = 'red'
fig.show()

property_df2['Price_in_millions'][116]

X_test.head(2)

price_predicted = model.predict([[2.0, 0.0, 0, 0, 1, 0, 1, 947.0]])
print('price of the property is {}'.format(price_predicted))

price_predicted = model.predict([[2.0, 1.0, 0, 0, 1, 1, 1, 808.0]])
print('price of the property is {}'.format(price_predicted))

